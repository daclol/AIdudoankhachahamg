# Import th∆∞ vi·ªán c·∫ßn thi·∫øt
import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# üîπ B∆∞·ªõc 1: ƒê·ªçc d·ªØ li·ªáu
file_path = r"c:/Users\Admin\Documents\Zalo Received Files/kiemtra\BTL Python\AI\Artificial_Neural_Network_Case_Study_data.csv"
  # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n c·ªßa b·∫°n
df = pd.read_csv(file_path)

# üîπ B∆∞·ªõc 2: X·ª≠ l√Ω d·ªØ li·ªáu
# Lo·∫°i b·ªè c·ªôt kh√¥ng c·∫ßn thi·∫øt
customer_info = df[['CustomerId', 'Surname']]  # Gi·ªØ l·∫°i th√¥ng tin kh√°ch h√†ng
X = df.drop(columns=['Exited', 'CustomerId', 'Surname', 'RowNumber'])  # D·ªØ li·ªáu ƒë·∫ßu v√†o
y = df['Exited']  # Nh√£n c·∫ßn d·ª± ƒëo√°n

# M√£ h√≥a bi·∫øn ph√¢n lo·∫°i
X = pd.get_dummies(X, columns=['Gender', 'Geography'], drop_first=True)

# Chu·∫©n h√≥a d·ªØ li·ªáu s·ªë
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# üîπ B∆∞·ªõc 3: Chia d·ªØ li·ªáu th√†nh t·∫≠p hu·∫•n luy·ªán & ki·ªÉm tra (80% - 20%)
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42, stratify=y
)

# üîπ B∆∞·ªõc 4: X√¢y d·ª±ng m√¥ h√¨nh m·∫°ng neuron (ANN)
model = keras.Sequential([
    keras.layers.Dense(16, activation='relu', input_shape=(X_train.shape[1],)),  # Hidden Layer 1
    keras.layers.Dense(8, activation='relu'),  # Hidden Layer 2
    keras.layers.Dense(1, activation='sigmoid')  # Output Layer
])

# Bi√™n d·ªãch m√¥ h√¨nh
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# üîπ B∆∞·ªõc 5: Hu·∫•n luy·ªán m√¥ h√¨nh
model.fit(X_train, y_train, epochs=5, batch_size=32, validation_data=(X_test, y_test))

# üîπ B∆∞·ªõc 6: D·ª± ƒëo√°n tr√™n to√†n b·ªô d·ªØ li·ªáu (10.000 kh√°ch h√†ng)
y_pred_prob_full = model.predict(X_scaled)  # D·ª± ƒëo√°n x√°c su·∫•t
y_pred_binary_full = (y_pred_prob_full > 0.5).astype(int)  # Chuy·ªÉn th√†nh 0 ho·∫∑c 1

# üîπ B∆∞·ªõc 7: Xu·∫•t k·∫øt qu·∫£ ƒë·∫ßy ƒë·ªß
results_full = customer_info.copy()  # Gi·ªØ l·∫°i th√¥ng tin kh√°ch h√†ng
results_full['Th·ª±c t·∫ø'] = y.values  # Gi√° tr·ªã th·ª±c t·∫ø
results_full['D·ª± ƒëo√°n'] = y_pred_binary_full.flatten()  # Gi√° tr·ªã d·ª± ƒëo√°n

# Xu·∫•t to√†n b·ªô d·ªØ li·ªáu ra file CSV
output_file_full = r"c:\Users\Admin\Documents\Zalo Received Files\kiemtra\BTL Python\AI\KetQuaDuDoan_Full.xlsx"
results_full.to_csv(output_file_full, index=False)
print(f" K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file: {output_file_full}")

# üîπ B∆∞·ªõc 8: Xu·∫•t 10.000 kh√°ch h√†ng ƒë·∫ßu ti√™n (n·∫øu c√≥ ƒë·ªß )
print(results_full.head(10000))

# üîπ B∆∞·ªõc 9: L∆∞u m√¥ h√¨nh m·∫°ng neuro
model.save(r"c:\Users\Admin\Documents\Zalo Received Files\kiemtra\BTL Python\AI\model.h5")
print(" M√¥ h√¨nh m·∫°ng neuron ƒë ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file: Artificial_Neural_Network_Case_Study_model.h5")

# üîπ B∆∞·ªõc 10: ƒê·ªçc m√¥ h√¨nh m·∫°ng neuro
model = keras.models.load_model(r"c:\Users\Admin\Documents\Zalo Received Files\kiemtra\BTL Python\AI\model.h5")
print(" M√¥ h√¨nh m·∫°ng neuron ƒë√£ ƒë·ªçc t·ª´ file: Artificial_Neural_Network_Case_Study_model.h5")

# üîπ B∆∞·ªõc 11: ƒê√°nh gi√° m√¥ h√¨nh
loss, accuracy = model.evaluate(X_test, y_test)
print(f"ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p ki·ªÉm tra: {accuracy:.2f}")

# üîπ B∆∞·ªõc 12: D·ª± ƒëo√°n tr√™n to√†n b·ªô d·ªØ li·ªáu (10.000 kh√°ch h√†ng)
y_pred_prob_full = model.predict(X_scaled)  # D·ª± ƒëo√°n x√°c su·∫•t
y_pred_binary_full = (y_pred_prob_full > 0.5).astype(int)  # Chuy·ªÉn th√†nh 0 ho·∫∑c 1

# üîπ B∆∞·ªõc 13: Xu·∫•t k·∫øt qu·∫£ ƒë√†y ƒë
# K·∫øt qu·∫£ d·ª± ƒëo√°n theo ƒë√∫ng th·ª© t·ª± ban ƒë·ªß
results_full = customer_info.copy()
results_full['Th·ª±c t·∫ø'] = y.values
results_full['D·ª± ƒëo√°n'] = y_pred_binary_full.flatten()

# Xu·∫•t to√†n b·ªô d·ªØ li·ªáu ra file CSV
output_file_full = r"c:\Users\Admin\Documents\Zalo Received Files\kiemtra\BTL Python\AI\KetQuaDuDoan_Full.xlsx"
results_full.to_csv(output_file_full, index=False)
print(f" K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u v√†o file: {output_file_full}")



#gd
# T·∫£i m√¥ h√¨nh to√†n c·ª•c
model = None
scaler = None  # ƒê·ªãnh nghƒ©a scaler ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o

# H√†m t·∫£i m√¥ h√¨nh
def load_model():
    global model
    try:
        model = tf.keras.models.load_model(r"c:\Users\Admin\Documents\Zalo Received Files\kiemtra\BTL Python\AI\model.h5")
        messagebox.showinfo("Th√¥ng b√°o", "M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
    except Exception as e:
        messagebox.showerror("L·ªói", f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")

# H√†m d·ª± ƒëo√°n
def predict():
    if model is None:
        messagebox.showwarning("C·∫£nh b√°o", "H√£y t·∫£i m√¥ h√¨nh tr∆∞·ªõc khi d·ª± ƒëo√°n!")
        return

    try:
        # L·∫•y d·ªØ li·ªáu ƒë·∫ßu v√†o
        credit_score = float(entry_credit_score.get())
        age = float(entry_age.get())
        balance = float(entry_balance.get())
        gender = var_gender.get()
        geography = var_geography.get()

        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu gi·ªëng nh∆∞ khi hu·∫•n luy·ªán
        input_data = np.array([[credit_score, age, balance]])
        
        # Chu·∫©n h√≥a d·ªØ li·ªáu
        if scaler:
            input_data = scaler.transform(input_data)

        # D·ª± ƒëo√°n
        prediction = model.predict(input_data)
        result = "Kh√°ch h√†ng c√≥ th·ªÉ r·ªùi b·ªè" if prediction[0][0] > 0.5 else "Kh√°ch h√†ng kh√¥ng r·ªùi b·ªè"

        label_result.config(text=result)
    except Exception as e:
        messagebox.showerror("L·ªói", f"L·ªói khi d·ª± ƒëo√°n: {e}")

# Giao di·ªán Tkinter
root = tk.Tk()
root.title("D·ª± ƒëo√°n kh√°ch h√†ng r·ªùi b·ªè ng√¢n h√†ng")
root.geometry("400x400")

# N√∫t t·∫£i m√¥ h√¨nh
tk.Button(root, text="T·∫£i M√¥ H√¨nh", command=load_model).pack(pady=10)

# Nh·∫≠p d·ªØ li·ªáu
frame_input = tk.Frame(root)
frame_input.pack(pady=10)

var_gender = tk.StringVar(value="Nam")
var_geography = tk.StringVar(value="France")

tk.Label(frame_input, text="ƒêi·ªÉm t√≠n d·ª•ng:").grid(row=0, column=0)
entry_credit_score = tk.Entry(frame_input)
entry_credit_score.grid(row=0, column=1)

tk.Label(frame_input, text="Tu·ªïi:").grid(row=1, column=0)
entry_age = tk.Entry(frame_input)
entry_age.grid(row=1, column=1)

tk.Label(frame_input, text="S·ªë d∆∞ t√†i kho·∫£n:").grid(row=2, column=0)
entry_balance = tk.Entry(frame_input)
entry_balance.grid(row=2, column=1)

tk.Label(frame_input, text="Gi·ªõi t√≠nh:").grid(row=3, column=0)
tk.OptionMenu(frame_input, var_gender, "Nam", "N·ªØ").grid(row=3, column=1)

tk.Label(frame_input, text="Qu·ªëc gia:").grid(row=4, column=0)
tk.OptionMenu(frame_input, var_geography, "France", "Germany", "Spain").grid(row=4, column=1)

# N√∫t d·ª± ƒëo√°n
btn_predict = tk.Button(root, text="D·ª± ƒëo√°n", command=predict)
btn_predict.pack(pady=10)

label_result = tk.Label(root, text="")
label_result.pack(pady=10)

root.mainloop()


